From 7c12e6b852b71486e4f5439b0b993c9e9e0e647f Mon Sep 17 00:00:00 2001
From: NurKeinNeid <nurkeinneid@derpfest.org>
Date: Sat, 22 Feb 2025 16:14:01 +0100
Subject: [PATCH] SystemUI: Add ongoing action chip toggle setting [1/2]

Change-Id: I2083b5184d9a8233722661e42d7d5f33876fc276
Signed-off-by: NurKeinNeid <nurkeinneid@derpfest.org>
---
 core/java/android/provider/Settings.java      |  5 ++
 .../layout/status_bar_ongoing_action_chip.xml |  4 +-
 .../OnGoingActionProgressController.java      | 86 +++++++++++++++----
 .../statusbar/OnGoingActionProgressGroup.java |  2 +-
 4 files changed, 79 insertions(+), 18 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 49b9acc94..b72f27359 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -6893,6 +6893,11 @@ public final class Settings {
             PRIVATE_SETTINGS.add(AUTO_BRIGHTNESS_ONE_SHOT);
         }
 
+        /**
+         * @hide
+         */
+        public static final String ONGOING_ACTION_CHIP = "ongoing_action_chip";
+
         /**
          * These entries are considered common between the personal and the managed profile,
          * since the managed profile doesn't get to change them.
diff --git a/packages/SystemUI/res/layout/status_bar_ongoing_action_chip.xml b/packages/SystemUI/res/layout/status_bar_ongoing_action_chip.xml
index d823da5e2..58997bc7a 100644
--- a/packages/SystemUI/res/layout/status_bar_ongoing_action_chip.xml
+++ b/packages/SystemUI/res/layout/status_bar_ongoing_action_chip.xml
@@ -15,7 +15,9 @@
      limitations under the License.
 -->
 
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/ongoing_action_chip"
     android:layout_width="60dp"
     android:layout_height="16sp"
     android:maxWidth="120dp"
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java b/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java
index ebf841626..f96016181 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java
@@ -17,10 +17,17 @@
 package com.android.systemui.statusbar;
 
 import android.app.Notification;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.res.ColorStateList;
+import android.database.ContentObserver;
 import android.graphics.drawable.Drawable;
+import android.net.Uri;
 import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.UserHandle;
+import android.provider.Settings;
 import android.service.notification.NotificationListenerService;
 import android.service.notification.StatusBarNotification;
 import android.util.Log;
@@ -36,8 +43,12 @@ import com.android.systemui.statusbar.OnGoingActionProgressGroup;
 /** Controls the ongoing progress chip based on notifcations @LineageExtension */
 public class OnGoingActionProgressController implements NotificationListener.NotificationHandler {
     private static final String TAG = "OngoingActionProgressController";
+    private static final String ONGOING_ACTION_CHIP_ENABLED = "ongoing_action_chip";
 
     private Context mContext;
+    private ContentResolver mContentResolver;
+    private final Handler mHandler;
+    private final SettingsObserver mSettingsObserver;
 
     // Views of chip
     private final ProgressBar mProgressBar;
@@ -52,8 +63,8 @@ public class OnGoingActionProgressController implements NotificationListener.Not
     private String mTrackedNotificationKey;
 
     private final IconFetcher mIconFetcher;
-
     private final NotificationListener mNotificationListener;
+    private boolean mIsEnabled;
 
     private static int getThemeColor(Context context, int attrResId) {
         TypedValue typedValue = new TypedValue();
@@ -61,6 +72,32 @@ public class OnGoingActionProgressController implements NotificationListener.Not
         return typedValue.data;
     }
 
+    private class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        @Override
+        public void onChange(boolean selfChange, Uri uri) {
+            super.onChange(selfChange, uri);
+            if (uri.equals(Settings.System.getUriFor(ONGOING_ACTION_CHIP_ENABLED))) {
+                updateSettings();
+            }
+        }
+
+        public void register() {
+            mContentResolver.registerContentObserver(
+                Settings.System.getUriFor(ONGOING_ACTION_CHIP_ENABLED),
+                false, this, UserHandle.USER_ALL);
+            // Update initial state
+            updateSettings();
+        }
+
+        public void unregister() {
+            mContentResolver.unregisterContentObserver(this);
+        }
+    }
+
     /**
      * Creates controller for ongoing progress notifications
      *
@@ -77,11 +114,18 @@ public class OnGoingActionProgressController implements NotificationListener.Not
             Log.wtf(TAG, "mNotificationListener is null");
         }
         mContext = context;
+        mContentResolver = context.getContentResolver();
+        mHandler = new Handler(Looper.getMainLooper());
+        mSettingsObserver = new SettingsObserver(mHandler);
+        
         mProgressBar = progressGroup.progressBarView;
         mProgressRootView = progressGroup.rootView;
         mIconView = progressGroup.iconView;
         mIconFetcher = new IconFetcher(context);
         mNotificationListener.addNotificationHandler(this);
+        
+        // Register settings observer
+        mSettingsObserver.register();
     }
 
     /** Checks whether notification has progress */
@@ -143,22 +187,22 @@ public class OnGoingActionProgressController implements NotificationListener.Not
 
     /** Updates progress views @AsyncUnsafe */
     private void updateViews() {
-        if (!mIsTrackingProgress) {
+        if (!mIsEnabled || !mIsTrackingProgress) {
             mProgressRootView.setVisibility(View.GONE);
-        } else {
-            // TODO: make it a bit faster by checking wether mIsTrackingProgress has changed between
-            // calls
-            mProgressRootView.setVisibility(View.VISIBLE);
-            if (mCurrentProgressMax == 0) {
-                Log.w(TAG, "updateViews: max progress is 0. Guessing it as 100");
-                mCurrentProgressMax = 100;
-            }
-            Log.d(TAG, "updateViews: " + mCurrentProgress + "/" + mCurrentProgressMax);
-            mProgressBar.setMax(mCurrentProgressMax);
-            mProgressBar.setProgress(mCurrentProgress);
-            if (mCurrentDrawable != null) {
-                mIconView.setImageDrawable(mCurrentDrawable);
-            }
+            return;
+        }
+        // TODO: make it a bit faster by checking wether mIsTrackingProgress has changed between
+        // calls
+        mProgressRootView.setVisibility(View.VISIBLE);
+        if (mCurrentProgressMax == 0) {
+            Log.w(TAG, "updateViews: max progress is 0. Guessing it as 100");
+            mCurrentProgressMax = 100;
+        }
+        Log.d(TAG, "updateViews: " + mCurrentProgress + "/" + mCurrentProgressMax);
+        mProgressBar.setMax(mCurrentProgressMax);
+        mProgressBar.setProgress(mCurrentProgress);
+        if (mCurrentDrawable != null) {
+            mIconView.setImageDrawable(mCurrentDrawable);
         }
     }
 
@@ -238,4 +282,14 @@ public class OnGoingActionProgressController implements NotificationListener.Not
     public void onNotificationsInitialized() {
         /*stub*/
     }
+
+    private void updateSettings() {
+        mIsEnabled = Settings.System.getIntForUser(mContentResolver,
+            ONGOING_ACTION_CHIP_ENABLED, 1, UserHandle.USER_CURRENT) == 1;
+        updateViews();
+    }
+
+    public void destroy() {
+        mSettingsObserver.unregister();
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressGroup.java b/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressGroup.java
index 6e86684b2..8542454af 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressGroup.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressGroup.java
@@ -27,7 +27,7 @@ public class OnGoingActionProgressGroup {
     public final ProgressBar progressBarView;
 
     public OnGoingActionProgressGroup(View rootView, ImageView iconView,
-                                      ProgressBar progressBarView){
+                                      ProgressBar progressBarView) {
         this.rootView = rootView;
         this.iconView = iconView;
         this.progressBarView = progressBarView;
-- 
2.43.0

