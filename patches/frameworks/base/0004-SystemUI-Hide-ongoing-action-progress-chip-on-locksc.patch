From b6c1ea897d7169c86932711785a74c0e93187c46 Mon Sep 17 00:00:00 2001
From: f104a <f104a@f104a.io>
Date: Thu, 27 Feb 2025 16:17:47 +0100
Subject: [PATCH] SystemUI: Hide ongoing action progress chip on lockscreen

Change-Id: Iace5817e4c3111d23a1c38c0707e4822ce8fd93c
---
 .../OnGoingActionProgressController.java      | 33 +++++++++++++++++--
 .../statusbar/phone/CentralSurfacesImpl.java  |  9 ++---
 2 files changed, 36 insertions(+), 6 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java b/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java
index f96016181..7d3ff60d4 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java
@@ -39,9 +39,10 @@ import android.widget.ProgressBar;
 import com.android.systemui.res.R;
 import com.android.systemui.util.IconFetcher;
 import com.android.systemui.statusbar.OnGoingActionProgressGroup;
+import com.android.systemui.statusbar.policy.KeyguardStateController;
 
 /** Controls the ongoing progress chip based on notifcations @LineageExtension */
-public class OnGoingActionProgressController implements NotificationListener.NotificationHandler {
+public class OnGoingActionProgressController implements NotificationListener.NotificationHandler, KeyguardStateController.Callback {
     private static final String TAG = "OngoingActionProgressController";
     private static final String ONGOING_ACTION_CHIP_ENABLED = "ongoing_action_chip";
 
@@ -55,8 +56,12 @@ public class OnGoingActionProgressController implements NotificationListener.Not
     private final View mProgressRootView;
     private final ImageView mIconView;
 
+    // Keyguard state
+    private final KeyguardStateController mKeyguardStateController;
+
     // Progress tracking variables
     private boolean mIsTrackingProgress = false;
+    private boolean mIsForceHidden = false;
     private int mCurrentProgress = 0;
     private int mCurrentProgressMax = 0;
     private Drawable mCurrentDrawable = null;
@@ -105,7 +110,8 @@ public class OnGoingActionProgressController implements NotificationListener.Not
      */
     public OnGoingActionProgressController(
             Context context, OnGoingActionProgressGroup progressGroup,
-            NotificationListener notificationListener) {
+            NotificationListener notificationListener,
+			KeyguardStateController keyguardStateController) {
         if (progressGroup == null) {
             Log.wtf(TAG, "progressGroup is null");
         }
@@ -113,6 +119,8 @@ public class OnGoingActionProgressController implements NotificationListener.Not
         if (mNotificationListener == null) {
             Log.wtf(TAG, "mNotificationListener is null");
         }
+        mKeyguardStateController = keyguardStateController;
+        keyguardStateController.addCallback(this);
         mContext = context;
         mContentResolver = context.getContentResolver();
         mHandler = new Handler(Looper.getMainLooper());
@@ -187,6 +195,10 @@ public class OnGoingActionProgressController implements NotificationListener.Not
 
     /** Updates progress views @AsyncUnsafe */
     private void updateViews() {
+        if(mIsForceHidden){ // Keyguard locked, user-disabled, etc.
+            mProgressRootView.setVisibility(View.GONE);
+            return;
+        }
         if (!mIsEnabled || !mIsTrackingProgress) {
             mProgressRootView.setVisibility(View.GONE);
             return;
@@ -220,6 +232,7 @@ public class OnGoingActionProgressController implements NotificationListener.Not
                 Log.d(TAG, "Tracked notification has lost progress");
                 synchronized (this) {
                     mIsTrackingProgress = false;
+                    mCurrentDrawable = null;
                     updateViews();
                 }
             }
@@ -252,6 +265,16 @@ public class OnGoingActionProgressController implements NotificationListener.Not
         }
     }
 
+    /**
+     * Sets hide chip override
+     * @param forceHidden if setted to true the chip would not be visible under any cricumctances
+     */
+    public void setForceHidden(final boolean forceHidden){
+            Log.d(TAG, "setForceHidden " + forceHidden);
+        mIsForceHidden = forceHidden;
+        updateViews();
+    }
+
     // Implementation of notification handler
     @Override
     public void onNotificationPosted(
@@ -283,6 +306,12 @@ public class OnGoingActionProgressController implements NotificationListener.Not
         /*stub*/
     }
 
+    // Callback from keyguard state
+    @Override
+    public void onKeyguardShowingChanged(){
+        setForceHidden(mKeyguardStateController.isShowing());
+    }
+
     private void updateSettings() {
         mIsEnabled = Settings.System.getIntForUser(mContentResolver,
             ONGOING_ACTION_CHIP_ENABLED, 1, UserHandle.USER_CURRENT) == 1;
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java
index 444e49b47..e85119272 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java
@@ -293,6 +293,7 @@ public class CentralSurfacesImpl implements CoreStartable, CentralSurfaces {
                     boolean occluded = mKeyguardStateController.isOccluded();
                     mStatusBarHideIconsForBouncerManager.setIsOccludedAndTriggerUpdate(occluded);
                     mScrimController.setKeyguardOccluded(occluded);
+		    Log.d(TAG, "occluded=" + occluded);
                 }
             };
 
@@ -1236,10 +1237,10 @@ public class CentralSurfacesImpl implements CoreStartable, CentralSurfaces {
                         setBouncerShowingForStatusBarComponents(mBouncerShowing);
                         checkBarModes();
                         mOnGoingActionProgressController =
-                             new OnGoingActionProgressController(
-                                     mContext,
-                                     statusBarViewController.getOngoingActionProgressGroup(),
-                                     mNotificationListener);
+                            new OnGoingActionProgressController(
+                                    mContext,
+                                    statusBarViewController.getOngoingActionProgressGroup(),
+                                    mNotificationListener, mKeyguardStateController);
                     });
         }
         if (!StatusBarRootModernization.isEnabled() && !StatusBarConnectedDisplays.isEnabled()) {
-- 
2.43.0

