From d25de6bcb7b6d70021b7fa6e06abe5da5f655aec Mon Sep 17 00:00:00 2001
From: Anna-Sophie Kasierocka <hanna.zaitsewa@gmail.com>
Date: Mon, 6 Jan 2025 21:40:25 +0100
Subject: [PATCH] Ongoing action progressbar chip implementation

This commit provides an implementation of a progressbar chip in statusbar which features ongoing action progress from a notification
The chip is featured to the right of default statusbar clock position, but before the icon container. The contents of chip are miniature app icon and a progress bar
The implementation provided is basic and lacks customizations which are planned to be added further
Idea is taken from this reddit post: https://www.reddit.com/r/NOTHING/comments/1dyuak6/nothing_os_30_images_fan_made/

Change-Id: Ide3ff14927b314d9b988e2c24eba5345fad168aa
---
 packages/SystemUI/res/layout/status_bar.xml   |   3 +
 .../layout/status_bar_ongoing_action_chip.xml |  55 ++++
 .../OnGoingActionProgressController.java      | 241 ++++++++++++++++++
 .../statusbar/OnGoingActionProgressGroup.java |  35 +++
 .../statusbar/phone/CentralSurfacesImpl.java  |  11 +
 .../phone/PhoneStatusBarViewController.kt     |  11 +
 .../android/systemui/util/IconFetcher.java    |  95 +++++++
 7 files changed, 451 insertions(+)
 create mode 100644 packages/SystemUI/res/layout/status_bar_ongoing_action_chip.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressGroup.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/util/IconFetcher.java

diff --git a/packages/SystemUI/res/layout/status_bar.xml b/packages/SystemUI/res/layout/status_bar.xml
index 1f4dea91d..35ee837b9 100644
--- a/packages/SystemUI/res/layout/status_bar.xml
+++ b/packages/SystemUI/res/layout/status_bar.xml
@@ -110,6 +110,9 @@
                         android:id="@+id/ongoing_activity_chip_secondary"
                         android:visibility="gone"/>
 
+                    <include layout="@layout/status_bar_ongoing_action_chip"
+                        android:id="@+id/status_bar_ongoing_action_chip" />
+
                     <com.android.systemui.statusbar.AlphaOptimizedFrameLayout
                         android:id="@+id/notification_icon_area"
                         android:layout_width="wrap_content"
diff --git a/packages/SystemUI/res/layout/status_bar_ongoing_action_chip.xml b/packages/SystemUI/res/layout/status_bar_ongoing_action_chip.xml
new file mode 100644
index 000000000..d823da5e2
--- /dev/null
+++ b/packages/SystemUI/res/layout/status_bar_ongoing_action_chip.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2025 The LineageOS Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="60dp"
+    android:layout_height="16sp"
+    android:maxWidth="120dp"
+    android:minWidth="60dp"
+    android:orientation="horizontal"
+    android:layout_gravity="center_vertical|start"
+    android:padding="4sp"
+    android:layout_marginLeft="3dp"
+    android:visibility="gone"
+    android:background="@drawable/action_chip_container_background">
+
+    <ImageView
+        android:id="@+id/ongoing_action_app_icon"
+        android:layout_width="8sp"
+        android:layout_height="8sp"
+        android:contentDescription="App icon"
+        android:gravity="center_vertical|start"
+        android:scaleType="centerInside"
+        android:tint="?android:attr/colorForeground"
+        android:src="@android:drawable/sym_def_app_icon" />
+
+    <View
+        android:layout_width="4dp"
+        android:layout_height="0dp" />
+
+    <ProgressBar
+        android:id="@+id/app_action_progress"
+        style="?android:attr/progressBarStyleHorizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="8sp"
+        android:layout_weight="1"
+        android:gravity="center_vertical"
+        android:indeterminate="false"
+        android:progress="0"
+        android:max="100" />
+
+</LinearLayout>
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java b/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java
new file mode 100644
index 000000000..ebf841626
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressController.java
@@ -0,0 +1,241 @@
+/**
+ * Copyright (c) 2025, The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar;
+
+import android.app.Notification;
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.graphics.drawable.Drawable;
+import android.os.Bundle;
+import android.service.notification.NotificationListenerService;
+import android.service.notification.StatusBarNotification;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+
+import com.android.systemui.res.R;
+import com.android.systemui.util.IconFetcher;
+import com.android.systemui.statusbar.OnGoingActionProgressGroup;
+
+/** Controls the ongoing progress chip based on notifcations @LineageExtension */
+public class OnGoingActionProgressController implements NotificationListener.NotificationHandler {
+    private static final String TAG = "OngoingActionProgressController";
+
+    private Context mContext;
+
+    // Views of chip
+    private final ProgressBar mProgressBar;
+    private final View mProgressRootView;
+    private final ImageView mIconView;
+
+    // Progress tracking variables
+    private boolean mIsTrackingProgress = false;
+    private int mCurrentProgress = 0;
+    private int mCurrentProgressMax = 0;
+    private Drawable mCurrentDrawable = null;
+    private String mTrackedNotificationKey;
+
+    private final IconFetcher mIconFetcher;
+
+    private final NotificationListener mNotificationListener;
+
+    private static int getThemeColor(Context context, int attrResId) {
+        TypedValue typedValue = new TypedValue();
+        context.getTheme().resolveAttribute(attrResId, typedValue, true);
+        return typedValue.data;
+    }
+
+    /**
+     * Creates controller for ongoing progress notifications
+     *
+     * @param View status bar View object to find progress chip
+     */
+    public OnGoingActionProgressController(
+            Context context, OnGoingActionProgressGroup progressGroup,
+            NotificationListener notificationListener) {
+        if (progressGroup == null) {
+            Log.wtf(TAG, "progressGroup is null");
+        }
+        mNotificationListener = notificationListener;
+        if (mNotificationListener == null) {
+            Log.wtf(TAG, "mNotificationListener is null");
+        }
+        mContext = context;
+        mProgressBar = progressGroup.progressBarView;
+        mProgressRootView = progressGroup.rootView;
+        mIconView = progressGroup.iconView;
+        mIconFetcher = new IconFetcher(context);
+        mNotificationListener.addNotificationHandler(this);
+    }
+
+    /** Checks whether notification has progress */
+    private static boolean hasProgress(final Notification notification) {
+        Bundle extras = notification.extras;
+        boolean indeterminate =
+                notification.extras.getBoolean(Notification.EXTRA_PROGRESS_INDETERMINATE, false);
+
+        boolean maxProgressValid =
+                notification.extras.getInt(Notification.EXTRA_PROGRESS_MAX, 0) > 0;
+
+        return extras.containsKey(Notification.EXTRA_PROGRESS)
+                && extras.containsKey(Notification.EXTRA_PROGRESS_MAX)
+                && !indeterminate
+                && maxProgressValid;
+    }
+
+    /** Starts tracking progress of certain notification @AsyncUnsafe */
+    private void trackProgress(final StatusBarNotification sbn) {
+        // Here we set progress tracking and update view if needed
+        mIsTrackingProgress = true;
+        mTrackedNotificationKey = sbn.getKey();
+        Notification notification = sbn.getNotification();
+        mCurrentProgressMax = notification.extras.getInt(Notification.EXTRA_PROGRESS_MAX, 100);
+        mCurrentProgress = notification.extras.getInt(Notification.EXTRA_PROGRESS, 0);
+        IconFetcher.AdaptiveDrawableResult drawable =
+                mIconFetcher.getMonotonicPackageIcon(sbn.getPackageName());
+        updateIconImageView(drawable);
+        updateViews();
+    }
+
+    /** Updates icon based on result from IconFetcher @AsyncUnsafe */
+    private void updateIconImageView(IconFetcher.AdaptiveDrawableResult drawable) {
+        if (drawable.isAdaptive) {
+            mIconView.setImageTintList(
+                    ColorStateList.valueOf(
+                            getThemeColor(mContext, android.R.attr.colorForeground)));
+        } else {
+            mIconView.setImageTintList(null);
+        }
+        mIconView.setImageDrawable(drawable.drawable);
+    }
+
+    /** Updates progress if needed @AsyncUnsafe */
+    private void updateProgressIfNeeded(final StatusBarNotification sbn) {
+        if (!mIsTrackingProgress) {
+            Log.wtf(TAG, "Called updateProgress if needed, but we do not tracking anything");
+            return;
+        }
+        // Log.d(TAG, "updateProgressIfNeeded: got notification update");
+        Notification notification = sbn.getNotification();
+        if (sbn.getKey().equals(mTrackedNotificationKey)) {
+            mCurrentProgressMax = notification.extras.getInt(Notification.EXTRA_PROGRESS_MAX, 100);
+            mCurrentProgress = notification.extras.getInt(Notification.EXTRA_PROGRESS, 0);
+            Log.d(TAG, "updateProgressIfNeeded: about to updateViews()");
+            updateViews();
+        }
+    }
+
+    /** Updates progress views @AsyncUnsafe */
+    private void updateViews() {
+        if (!mIsTrackingProgress) {
+            mProgressRootView.setVisibility(View.GONE);
+        } else {
+            // TODO: make it a bit faster by checking wether mIsTrackingProgress has changed between
+            // calls
+            mProgressRootView.setVisibility(View.VISIBLE);
+            if (mCurrentProgressMax == 0) {
+                Log.w(TAG, "updateViews: max progress is 0. Guessing it as 100");
+                mCurrentProgressMax = 100;
+            }
+            Log.d(TAG, "updateViews: " + mCurrentProgress + "/" + mCurrentProgressMax);
+            mProgressBar.setMax(mCurrentProgressMax);
+            mProgressBar.setProgress(mCurrentProgress);
+            if (mCurrentDrawable != null) {
+                mIconView.setImageDrawable(mCurrentDrawable);
+            }
+        }
+    }
+
+    /**
+     * Should be called when new notification is posted
+     *
+     * @param StatusBarNotification a notification which was posted
+     */
+    private void onNotificationPosted(final StatusBarNotification sbn) {
+        Notification notification = sbn.getNotification();
+        if (!hasProgress(notification)) {
+            // Log.d(TAG, "Got notification without progress");
+            if (sbn.getKey() == mTrackedNotificationKey) {
+                // The notification we track has no progress anymore
+                Log.d(TAG, "Tracked notification has lost progress");
+                synchronized (this) {
+                    mIsTrackingProgress = false;
+                    updateViews();
+                }
+            }
+            return;
+        }
+        synchronized (this) {
+            if (!mIsTrackingProgress) {
+                trackProgress(sbn);
+            } else {
+                updateProgressIfNeeded(sbn);
+            }
+        }
+    }
+
+    /**
+     * Should be call when notification is removed
+     *
+     * @param StatusBarNotification a notification which was removed
+     */
+    private void onNotificationRemoved(final StatusBarNotification sbn) {
+        synchronized (this) {
+            if (!mIsTrackingProgress) {
+                return;
+            }
+            if (sbn.getKey().equals(mTrackedNotificationKey)) {
+                mIsTrackingProgress = false;
+                mCurrentDrawable = null;
+                updateViews();
+            }
+        }
+    }
+
+    // Implementation of notification handler
+    @Override
+    public void onNotificationPosted(
+            StatusBarNotification sbn, NotificationListenerService.RankingMap _rankingMap) {
+        onNotificationPosted(sbn);
+    }
+
+    @Override
+    public void onNotificationRemoved(
+            StatusBarNotification sbn, NotificationListenerService.RankingMap rankingMap) {
+        onNotificationRemoved(sbn);
+    }
+
+    @Override
+    public void onNotificationRemoved(
+            StatusBarNotification sbn,
+            NotificationListenerService.RankingMap _rankingMap,
+            int _reason) {
+        onNotificationRemoved(sbn);
+    }
+
+    @Override
+    public void onNotificationRankingUpdate(NotificationListenerService.RankingMap _rankingMap) {
+        /*stub*/
+    }
+
+    @Override
+    public void onNotificationsInitialized() {
+        /*stub*/
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressGroup.java b/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressGroup.java
new file mode 100644
index 000000000..6e86684b2
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/OnGoingActionProgressGroup.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2025, The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar;
+
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+
+/** On-going action progress chip view group stores all elements of chip */
+public class OnGoingActionProgressGroup {
+    public final View rootView;
+    public final ImageView iconView;
+    public final ProgressBar progressBarView;
+
+    public OnGoingActionProgressGroup(View rootView, ImageView iconView,
+                                      ProgressBar progressBarView){
+        this.rootView = rootView;
+        this.iconView = iconView;
+        this.progressBarView = progressBarView;
+    }
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java
index b27e6b4c4..444e49b47 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java
@@ -189,12 +189,14 @@ import com.android.systemui.statusbar.KeyguardIndicationController;
 import com.android.systemui.statusbar.LiftReveal;
 import com.android.systemui.statusbar.LightRevealScrim;
 import com.android.systemui.statusbar.LockscreenShadeTransitionController;
+import com.android.systemui.statusbar.NotificationListener;
 import com.android.systemui.statusbar.NotificationLockscreenUserManager;
 import com.android.systemui.statusbar.NotificationMediaManager;
 import com.android.systemui.statusbar.NotificationPresenter;
 import com.android.systemui.statusbar.NotificationRemoteInputManager;
 import com.android.systemui.statusbar.NotificationShadeDepthController;
 import com.android.systemui.statusbar.NotificationShadeWindowController;
+import com.android.systemui.statusbar.OnGoingActionProgressController;
 import com.android.systemui.statusbar.PowerButtonReveal;
 import com.android.systemui.statusbar.PulseExpansionHandler;
 import com.android.systemui.statusbar.StatusBarState;
@@ -383,6 +385,10 @@ public class CentralSurfacesImpl implements CoreStartable, CentralSurfaces {
     private final LightRevealScrim mLightRevealScrim;
     private PowerButtonReveal mPowerButtonReveal;
 
+    private OnGoingActionProgressController mOnGoingActionProgressController = null;
+
+    @Inject public NotificationListener mNotificationListener;
+
     /**
      * Whether we should delay the wakeup animation (which shows the notifications and moves the
      * clock view). This is typically done when waking up from a 'press to unlock' gesture on a
@@ -1229,6 +1235,11 @@ public class CentralSurfacesImpl implements CoreStartable, CentralSurfaces {
                         mShadeSurface.updateExpansionAndVisibility();
                         setBouncerShowingForStatusBarComponents(mBouncerShowing);
                         checkBarModes();
+                        mOnGoingActionProgressController =
+                             new OnGoingActionProgressController(
+                                     mContext,
+                                     statusBarViewController.getOngoingActionProgressGroup(),
+                                     mNotificationListener);
                     });
         }
         if (!StatusBarRootModernization.isEnabled() && !StatusBarConnectedDisplays.isEnabled()) {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarViewController.kt b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarViewController.kt
index f19d70704..fb973fb06 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarViewController.kt
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarViewController.kt
@@ -23,6 +23,8 @@ import android.view.MotionEvent
 import android.view.View
 import android.view.ViewGroup
 import android.view.ViewTreeObserver
+import android.widget.ImageView
+import android.widget.ProgressBar
 import androidx.annotation.VisibleForTesting
 import com.android.systemui.Flags
 import com.android.systemui.Gefingerpoken
@@ -44,6 +46,7 @@ import com.android.systemui.shade.domain.interactor.PanelExpansionInteractor
 import com.android.systemui.shade.shared.flag.ShadeWindowGoesAround
 import com.android.systemui.shared.animation.UnfoldMoveFromCenterAnimator
 import com.android.systemui.statusbar.data.repository.StatusBarContentInsetsProviderStore
+import com.android.systemui.statusbar.OnGoingActionProgressGroup
 import com.android.systemui.statusbar.policy.Clock
 import com.android.systemui.statusbar.policy.ConfigurationController
 import com.android.systemui.statusbar.window.StatusBarWindowStateController
@@ -235,6 +238,14 @@ private constructor(
         }
     }
 
+    fun getOngoingActionProgressGroup(): OnGoingActionProgressGroup{
+        return OnGoingActionProgressGroup(
+            mView.findViewById(R.id.status_bar_ongoing_action_chip),
+            mView.findViewById(R.id.ongoing_action_app_icon) as ImageView,
+            mView.findViewById(R.id.app_action_progress) as ProgressBar,
+        )
+    }
+
     private fun addDarkReceivers() {
         darkIconDispatcher.addDarkReceiver(battery)
         darkIconDispatcher.addDarkReceiver(clock)
diff --git a/packages/SystemUI/src/com/android/systemui/util/IconFetcher.java b/packages/SystemUI/src/com/android/systemui/util/IconFetcher.java
new file mode 100644
index 000000000..8f4b9a7d1
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/util/IconFetcher.java
@@ -0,0 +1,95 @@
+/**
+ * Copyright (c) 2025, The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.util;
+
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.graphics.Color;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
+import android.graphics.drawable.AdaptiveIconDrawable;
+import android.graphics.drawable.Drawable;
+
+/** A class helping to fetch different versions of icons @LineageExtension */
+public class IconFetcher {
+
+    /** A class which stores wether icon is adaptive and icon itself. */
+    public class AdaptiveDrawableResult {
+        public boolean isAdaptive;
+        public Drawable drawable;
+
+        public AdaptiveDrawableResult(boolean isAdaptive, Drawable drawable) {
+            this.isAdaptive = isAdaptive;
+            this.drawable = drawable;
+        }
+    }
+
+    private final Context mContext;
+
+    public IconFetcher(Context context) {
+        mContext = context;
+    }
+
+    /**
+     * Gets a standard package icon
+     *
+     * @param packageName name of package for which icon would be fetched
+     */
+    public Drawable getPackageIcon(String packageName) {
+        PackageManager packageManager = mContext.getPackageManager();
+        try {
+            return packageManager.getApplicationIcon(packageName);
+        } catch (PackageManager.NameNotFoundException e) {
+            e.printStackTrace();
+            return mContext.getDrawable(android.R.drawable.sym_def_app_icon);
+        }
+    }
+
+    /**
+     * Returns a monotonic version of the app icon as a Drawable. The foreground of adaptive icons
+     * is extracted and tinted, while non-adaptive icons are directly tinted.
+     *
+     * @param packageName The package name of the app whose icon is to be fetched.
+     * @param tintColor The color to use for the monotonic tint.
+     * @return A monotonic Drawable of the app icon or standard app icon within
+     *     AdaptiveDrawableResult
+     */
+    public AdaptiveDrawableResult getMonotonicPackageIcon(String packageName) {
+        int tintColor = Color.WHITE;
+        try {
+            PackageManager packageManager = mContext.getPackageManager();
+            Drawable icon = packageManager.getApplicationIcon(packageName);
+
+            if (icon instanceof AdaptiveIconDrawable) {
+                AdaptiveIconDrawable adaptiveIcon = (AdaptiveIconDrawable) icon;
+
+                Drawable foreground = adaptiveIcon.getForeground();
+
+                foreground.setColorFilter(
+                        new PorterDuffColorFilter(tintColor, PorterDuff.Mode.SRC_IN));
+                return new AdaptiveDrawableResult(true, icon);
+            } else {
+                return new AdaptiveDrawableResult(false, icon);
+            }
+        } catch (PackageManager.NameNotFoundException e) {
+            e.printStackTrace();
+            Drawable defaultIcon = mContext.getDrawable(android.R.drawable.sym_def_app_icon);
+            // The icon is not adaptive by default
+            return new AdaptiveDrawableResult(false, defaultIcon);
+        }
+    }
+}
-- 
2.43.0

